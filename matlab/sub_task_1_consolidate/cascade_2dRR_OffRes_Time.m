function [ratio,cas,dir] = cascade_2dRR_OffRes_Time(E_vib,nquanta,ovlp,...
    parameters_laser,parameters_material)
% Compute third order cascade response functions
%   wviball             : vibrational energies for each basis state
%   ovlp                  : overlap integrals between basis states.
%   nquanta           : number of quanta
%   parameters      : Material parameters
%
%   seq                  : Sequential third order cascades
%   par                  : Parallel third order cascades
%   cascades2d    : Sum of sequential and parallel third order cascades
%   direct2d          : Direct fifth order signal

%% Laser parameters
dt=parameters_laser.dt;
nt=parameters_laser.nt;
w_L=parameters_laser.w_L;

%% Material parameters
% Electronic dephasing rate
gamma_eg=parameters_material.gamma_eg;
% Vibrational dephasing rate
gamma_vib=parameters_material.gamma_vib;
% Electronic energy gap
weg=parameters_material.weg;
% Vibrational frequencies Solute
wvib=parameters_material.wvib;
% Vibrational frequencies Solvent
wsolv=parameters_material.wsolv;
% Vibrational energy levels Solvent
wsolv=(0:nquanta+1/2)*wsolv;

%% COMPUTE BOLTZMANN POPULATIONS
kT=200; % kT in cm^-1
% Compute array of 
boltz_factor=exp(-E_vib/kT);
boltz_factor_Solv=exp(-wsolv/kT);
% Compute partition function
partition_func=sum(boltz_factor);
partition_func_Solv=sum(boltz_factor_Solv);
% Compute boltzman populations
boltz_pop=boltz_factor/partition_func;
boltz_pop_Solv=boltz_factor_Solv/partition_func_Solv;

%%
iq=nquanta;
% Speed of light in cm/fs
c=2.998E-5;%
% 2pi*c
r2w=2*pi*c;%0.0001885;%
% Vibrational energy gaps
[wi,wf]=meshgrid(E_vib,E_vib);
w=wf-wi;

damp=gamma_vib*c*2*pi;

%
kjD=1:nt;
tauD=(kjD-1)*dt;
ntC=nt*2;
kjC=1:ntC;
tauC=(kjC-1)*dt;

% Initialize terms of response function to 0
r1=complex(zeros(nt,nt,iq,'double'));
r2=r1;r3=r1;r4=r1;
r5=r1;r6=r1;r7=r1;r8=r1;
r9=r1;r10=r1;r11=r1;r12=r1;
r13=r1;r14=r1;r15=r1;r16=r1;

f1=complex(zeros(1,ntC,iq,'double'));f2=f1;f3=f1;f4=f1;
f1S=complex(zeros(1,ntC,iq,'double'));f2S=f1S;

[tau_1D,tau_2D,wDf,wDi]=ndgrid(tauD,tauD,E_vib,E_vib);
[tau0,wCf,wCi]=ndgrid(tauC,E_vib,E_vib);
[tau0S,wCfS,wCiS]=ndgrid(tauC,wsolv,wsolv);
wD=wDf-wDi;
wC=wCf-wCi;
wCS=wCfS-wCiS;
Lp=1./(w_L-weg-w+1i*gamma_eg);
Lm=1./(-w_L+weg-w+1i*gamma_eg);
Lc1=exp((-1i*wD*r2w-damp).*tau_1D);
Lc2=exp((-1i*wD*r2w-damp).*tau_2D);
Lc0=exp((-1i*wC*r2w-damp).*tau0);
Lc0S=exp((-1i*wCS*r2w-damp).*tau0S);
%% Loop over initial state m => assume m is in the ground state m=1, 0
% quanta.
parfor m=1:iq
    % Loop over vibrational states n
    for n=1:iq
        if abs(n-m)==1
            f1S(:,:,m)=f1S(:,:,m)+boltz_pop_Solv(m)*Lc0S(:,n,m).';
            %
            f2S(:,:,m)=f2S(:,:,m)+boltz_pop_Solv(m)*Lc0S(:,m,n).';
        end
        % Loop over vibrational states k
        for k=1:iq
            % Loop over vibrational states l
            for l=1:iq
                %
                % NOTE OVERLAP INEGRALS ARE STORED WITH EXCITED STATE INDEX FIRST
                %
                if k~=m
                    f1(:,:,m)=f1(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,m)...
                        *Lp(n,m)...
                        *Lc0(:,k,m).'...
                        *Lp(l,m);
                    %
                    f2(:,:,m)=f2(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,k)...
                        *Lm(m,n)...
                        *Lc0(:,m,k).'...
                        *Lp(l,k);
                end
                %
                if k~=n
                    f3(:,:,m)=f3(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,l)...
                        *Lp(n,m)...
                        *Lc0(:,n,k).'...
                        *Lp(n,l);
                    %
                    f4(:,:,m)=f4(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,l)...
                        *Lm(m,n)...
                        *Lc0(:,k,n).'...
                        *Lp(k,l);
                end
                %
                % Compute fifth order auxillary functions
                % Loop over vibrational states u
                for u=1:iq
                    % Loop over vibrational states v
                    for v=1:iq
                        %
                        if m~=u && m~=k
                            % Auxillary function #1 for fifth order signal
%                             r1(:,:,m)=r1(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,u)*ovlp(v,m)...
%                                 *Lp(n,m)...
%                                 .*exp((-1i*w(k,m)*r2w-damp)*tau_1 )...
%                                 *Lp(l,m)...
%                                 .*exp((-1i*w(u,m)*r2w-gamma_vib*c)*tau_2)...
%                                 *Lp(v,m);
                            r1(:,:,m)=r1(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,u)*ovlp(v,m)...
                                *Lp(n,m)...
                                .*Lc1(:,:,k,m)...
                                *Lp(l,m)...
                                .*Lc2(:,:,u,m)...
                                *Lp(v,m);
                            
                        end
                        %
                        if k~=u && m~=k
                            % Auxillary function #2 for fifth order signal
%                             r2(:,:,m)=r2(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,k)*ovlp(v,u)...
%                                 *Lp(n,m)...
%                                 .*exp((-1i*w(k,m)*r2w-damp)*tau_1 )...
%                                 *Lm(k,l)...
%                                 .*exp((-1i*w(k,u)*r2w-gamma_vib*c)*tau_2)...
%                                 *Lp(v,u);
                            r2(:,:,m)=r2(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,k)*ovlp(v,u)...
                                *Lp(n,m)...
                                .*Lc1(:,:,k,m)...
                                *Lm(k,l)...
                                .*Lc2(:,:,k,u)...
                                *Lp(v,u);
                        end
                        %
                        if m~=u && m~=k
                            % Auxillary function #3 for fifth order signal
%                             r3(:,:,m)=r3(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,m)*ovlp(v,u)...
%                                 *Lm(m,n)...
%                                 .*exp((-1i*w(m,k)*r2w-damp)*tau_1 )...
%                                 *Lm(m,l)...
%                                 .*exp((-1i*w(m,u)*r2w-gamma_vib*c)*tau_2)...
%                                 *Lp(v,u);
                            r3(:,:,m)=r3(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,m)*ovlp(v,u)...
                                *Lm(m,n)...
                                .*Lc1(:,:,m,k)...
                                *Lm(m,l)...
                                .*Lc2(:,:,m,u)...
                                *Lp(v,u);
                        end
                        %
                        if k~=u && m~=k
                            % Auxillary function #4 for fifth order signal
%                             r4(:,:,m)=r4(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,u)*ovlp(v,k)...
%                                 *Lm(m,n)...
%                                 .*exp((-1i*w(m,k)*r2w-damp)*tau_1 )...
%                                 *Lp(l,k)...
%                                 .*exp((-1i*w(u,k)*r2w-gamma_vib*c)*tau_2)...
%                                 *Lp(v,k);
                            r4(:,:,m)=r4(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,u)*ovlp(v,k)...
                                *Lm(m,n)...
                                .*Lc1(:,:,m,k)...
                                *Lp(l,k)...
                                .*Lc2(:,:,u,k)...
                                *Lp(v,k);
                        end
                        %
                        %
                        if true
                            if k~=u && n~=k
                                % Auxillary function #5 for fifth order signal
%                                 r5(:,:,m)=r5(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(k,v)*ovlp(u,v)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(n,k)*r2w-damp)*tau_1 )...
%                                     *Lm(l,k)...
%                                     .*exp((-1i*w(u,k)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(u,v);
                                r5(:,:,m)=r5(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(k,v)*ovlp(u,v)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,n,k)...
                                    *Lm(l,k)...
                                    .*Lc2(:,:,u,k)...
                                    *Lp(u,v);
                            end
                            %
                            if n~=u && n~=k
                                % Auxillary function #6 for fifth order signal
%                                 r6(:,:,m)=r6(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(u,v)*ovlp(n,v)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(n,k)*r2w-damp)*tau_1 )...
%                                     *Lp(n,l)...
%                                     .*exp((-1i*w(n,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(n,v);
                                r6(:,:,m)=r6(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(u,v)*ovlp(n,v)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,n,k)...
                                    *Lp(n,l)...
                                    .*Lc2(:,:,n,u)...
                                    *Lp(n,v);
                                %
                                % Auxillary function #7 for fifth order signal
%                                 r7(:,:,m)=r7(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(n,v)*ovlp(u,v)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(k,n)*r2w-damp)*tau_1 )...
%                                     *Lm(l,n)...
%                                     .*exp((-1i*w(u,n)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(u,v);
                                r7(:,:,m)=r7(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(n,v)*ovlp(u,v)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,k,n)...
                                    *Lm(l,n)...
                                    .*Lc2(:,:,u,n)...
                                    *Lp(u,v);
                            end
                            %
                            if k~=u && n~=k
                                % Auxillary function #8 for fifth order signal
%                                 r8(:,:,m)=r8(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(u,v)*ovlp(k,v)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(k,n)*r2w-damp)*tau_1 )...
%                                     *Lp(k,l)...
%                                     .*exp((-1i*w(k,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(k,v);
                                r8(:,:,m)=r8(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(u,v)*ovlp(k,v)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,k,n)...
                                    *Lp(k,l)...
                                    .*Lc2(:,:,k,u)...
                                    *Lp(k,v);
                            end
                            %
                            if l~=u && m~=k
                                % Auxillary function #9 for fifth order signal
%                                 r9(:,:,m)=r9(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(u,v)*ovlp(l,v)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(k,m)*r2w-damp)*tau_1 )...
%                                     *Lp(l,m)...
%                                     .*exp((-1i*w(l,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(l,v);
                                r9(:,:,m)=r9(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(u,v)*ovlp(l,v)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,k,m)...
                                    *Lp(l,m)...
                                    .*Lc2(:,:,l,u)...
                                    *Lp(l,v);
                                %
                                % Auxillary function #10 for fifth order signal
%                                 r10(:,:,m)=r10(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(l,v)*ovlp(u,v)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(k,m)*r2w-damp)*tau_1 )...
%                                     *Lm(k,l)...
%                                     .*exp((-1i*w(u,l)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(u,v);
                                r10(:,:,m)=r10(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(l,v)*ovlp(u,v)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,k,m)...
                                    *Lm(k,l)...
                                    .*Lc2(:,:,u,l)...
                                    *Lp(u,v);
                                %
                                % Auxillary function #11 for fifth order signal
%                                 r11(:,:,m)=r11(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(u,v)*ovlp(l,v)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(m,k)*r2w-damp)*tau_1 )...
%                                     *Lp(l,k)...
%                                     .*exp((-1i*w(l,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(l,v);
                                r11(:,:,m)=r11(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(u,v)*ovlp(l,v)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,m,k)...
                                    *Lp(l,k)...
                                    .*Lc2(:,:,l,u)...
                                    *Lp(l,v);
                                %
                                % Auxillary function #12 for fifth order signal
%                                 r12(:,:,m)=r12(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(l,v)*ovlp(u,v)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(m,k)*r2w-damp)*tau_1 )...
%                                     *Lm(m,l)...
%                                     .*exp((-1i*w(u,l)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(u,v);
                                r12(:,:,m)=r12(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(l,v)*ovlp(u,v)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,m,k)...
                                    *Lm(m,l)...
                                    .*Lc2(:,:,u,l)...
                                    *Lp(u,v);
                            end
                            if l~=u && n~=k
                                %
                                % Auxillary function #13 for fifth order signal
%                                 r13(:,:,m)=r13(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,l)*ovlp(v,u)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(n,k)*r2w-damp)*tau_1 )...
%                                     *Lm(l,k)...
%                                     .*exp((-1i*w(l,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(v,u);
                                r13(:,:,m)=r13(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,l)*ovlp(v,u)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,n,k)...
                                    *Lm(l,k)...
                                    .*Lc2(:,:,l,u)...
                                    *Lp(v,u);
                                %
                                % Auxillary function #14 for fifth order signal
%                                 r14(:,:,m)=r14(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,u)*ovlp(v,l)...
%                                     *Lp(n,m)...
%                                     .*exp((-1i*w(n,k)*r2w-damp)*tau_1 )...
%                                     *Lp(n,l)...
%                                     .*exp((-1i*w(u,l)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(v,l);
                                r14(:,:,m)=r14(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,u)*ovlp(v,l)...
                                    *Lp(n,m)...
                                    .*Lc1(:,:,n,k)...
                                    *Lp(n,l)...
                                    .*Lc2(:,:,u,l)...
                                    *Lp(v,l);
                                %
                                % Auxillary function #15 for fifth order signal
%                                 r15(:,:,m)=r15(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,l)*ovlp(v,u)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(k,n)*r2w-damp)*tau_1 )...
%                                     *Lm(l,n)...
%                                     .*exp((-1i*w(l,u)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(v,u);
                                r15(:,:,m)=r15(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,l)*ovlp(v,u)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,k,n)...
                                    *Lm(l,n)...
                                    .*Lc2(:,:,l,u)...
                                    *Lp(v,u);
                                %
                                % Auxillary function #16 for fifth order signal
%                                 r16(:,:,m)=r16(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,u)*ovlp(v,l)...
%                                     *Lm(m,n)...
%                                     .*exp((-1i*w(k,n)*r2w-damp)*tau_1 )...
%                                     *Lp(k,l)...
%                                     .*exp((-1i*w(u,l)*r2w-gamma_vib*c)*tau_2)...
%                                     *Lp(v,l);
                                r16(:,:,m)=r16(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,u)*ovlp(v,l)...
                                    *Lm(m,n)...
                                    .*Lc1(:,:,k,n)...
                                    *Lp(k,l)...
                                    .*Lc2(:,:,u,l)...
                                    *Lp(v,l);
                            end
                        end
                        %
                        
                        
                        
                    end % End loop over vibrational states v
                end % End loop over vibrational states u
                
            end % End loop over vibrational state l
        end % End loop over vibrational states k
    end % End loop over vibrational states n
end % End loop over initial state
    f1=sum(f1,3);f2=sum(f2,3);f3=sum(f3,3);f4=sum(f4,3);
    f1S=sum(f1S,3);f2S=sum(f2S,3);
    r1=sum(r1,3);r2=sum(r2,3);r3=sum(r3,3);r4=sum(r4,3);
    r5=sum(r5,3);r6=sum(r6,3);r7=sum(r7,3);r8=sum(r8,3);
    r9=sum(r9,3);r10=sum(r10,3);r11=sum(r11,3);r12=sum(r12,3);
    r13=sum(r13,3);r14=sum(r14,3);r15=sum(r15,3);r16=sum(r16,3);

%
% direct=-0.09*(r1+r2+r3+r4);
direct=(1i)^5*((r1+r2+r3+r4)+(r5+r6+r7+r8)...
    +(r9+r10+r11+r12)+(r13+r14+r15+r16));%0.09*
% COMPUTE 2D CASCADES
ntC=nt;
for j=1:ntC
for jj=1:ntC
seq1(jj,j)=-(1i)^4*(f1(j)+f2(j)+f3(j)+f4(j)+conj(f1(j))...
    +conj(f2(j))+conj(f3(j))+conj(f4(j)))*(f1S(jj)+f2S(jj));
seq2(jj,j)=-(1i)^4*(f1S(j)+f2S(j)...
    +conj(f1S(j))+conj(f2S(j)))*(f1(jj)+f2(jj)+f3(jj)+f4(jj));
par1(jj,j)=-2*(1i)^4*(f1(jj)+f2(jj)+f3(jj)+f4(jj))...
    *(f1S(j+jj)+f2S(j+jj));
par2(jj,j)=-2*(1i)^4*(f1S(jj)+f2S(jj))...
    *(f1(j+jj)+f2(j+jj)+f3(j+jj)+f4(j+jj));
end
end


seq=seq1(1:ntC,1:ntC)+seq2(1:ntC,1:ntC);
par=par1+par2;
cascade=seq+par;

dw=1/ntC;
w=(-1/2:dw:(1/2-dw))/dt/c;
[~,iomega]=min(abs(w-wvib));

cas2=fftshift(fft2(cascade))*(2*pi*dt*c)^2;cas2=cas2-cas2(end,end);

dir2=abs(fftshift(fft2(direct)))*(2*pi*dt*c)^2;dir2=dir2-dir2(end,end);
cas=abs(cas2(iomega,iomega));
dir=dir2(iomega,iomega);
ratio=cas/dir;

figure;
subplot(2,2,1);contour(w,w,abs(cas2),50);colorbar;colormap('jet');
subplot(2,2,2);contour(w,w,abs(dir2),50);colorbar;colormap('jet');
subplot(2,2,3);contour(w,w,abs(6.8e-16*3e10*cas2+dir2),50);colorbar;colormap('jet');
subplot(2,2,4);contour(w,w,abs(6.8e-16*3e10*cas2)+abs(dir2),50);colorbar;colormap('jet');

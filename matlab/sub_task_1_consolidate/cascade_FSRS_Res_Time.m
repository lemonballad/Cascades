function [cas2,dir2] = cascade_FSRS_Res_Time(E_vib,nquanta,ovlp,...
    parameters_laser,parameters_material)
% Compute third order cascade response functions
%   wviball             : vibrational energies for each basis state
%   ovlp                  : overlap integrals between basis states.
%   nquanta           : number of quanta
%   parameters      : Material parameters

%% COMPUTE BOLTZMANN POPULATIONS
kT=200; % kT in cm^-1
% Compute array of 
boltz_factor=exp(-E_vib/kT);
% Compute partition function
partition_func=sum(boltz_factor);
% Compute boltzman populations
boltz_pop=boltz_factor/partition_func;

%%
iq=nquanta;
% Speed of light in cm/fs
c=2.998E-5;%
r2w=2*pi*c;
% Vibrational energy gaps
[wi,wf]=meshgrid(E_vib,E_vib);
w=wf-wi;

%% Material parameters
% Electronic dephasing rate
gamma_eg=parameters_material.gamma_eg;
% Vibrational dephasing rate
gamma_vib=parameters_material.gamma_vib;
% Electronic energy gap
weg=parameters_material.weg;
% Vibrational mode frequency
wvib=parameters_material.wvib;

%% Laser parameters
% Frequency pulse actinic
w_ap=parameters_laser.w_ap;
% Frequency pulse raman
w_rp=parameters_laser.w_rp;

% Spectral width of actinic pulse
LAMBDA_ap=parameters_laser.LAMBDA_ap;
% Spectral width of raman pulse
LAMBDA_rp=parameters_laser.LAMBDA_rp;
% Time step
dt=parameters_laser.dt;
% Number of time steps
nt=parameters_laser.nt;

%%
damp=gamma_vib*r2w;

% Time delay 
tau1=0:dt:(nt-1)*dt;
tau2=300;
% Frequency step
dw=1/nt;
% Number of frequency points in spectrum
nw=nt;
% Frequency axis
ww=(-1/2:dw:(1/2-dw))/dt/c;ww=ww-ww(1);

% Initialize response functions to 0
r1=zeros(nw,nt,iq,'double');
r2=r1;r3=r1;r4=r1;
r5=r1;r6=r1;r7=r1;r8=r1;
r9=r1;r10=r1;r11=r1;r12=r1;
r13=r1;r14=r1;r15=r1;r16=r1;

f1A=zeros(nw,nt,iq,'double');
f1B=f1A;f2A=f1A;f2B=f1A;f3A=f1A;f3B=f1A;f4A=f1A;f4B=f1A;

[W,tau_1D,wDf,wDi]=ndgrid(ww,tau1,E_vib,E_vib);
wD=wDf-wDi;
W_t=w_rp-W-wD;

L_ap_p=1./(w_ap-weg-w+1i*gamma_eg);
L_ap_m=1./(-w_ap+weg-w+1i*gamma_eg);
L_rp_m=1./(-w_rp+weg-w+1i*gamma_eg);
L_t=1./(W_t-weg+1i*gamma_eg);
D=exp((-1i*wD*r2w-damp).*tau_1D).*2*LAMBDA_ap./(wD.^2+LAMBDA_ap^2);
J=1./(W_t-w_rp+1i*(gamma_vib-LAMBDA_rp)).*exp(-LAMBDA_rp*tau2*r2w);

%% Loop over tau
% Loop over initial state m => assume m is in the ground state m=1, 0
% quanta.
parfor m=1:1
    % Loop over vibrational states n
    for n=1:iq
        % Loop over vibrational states k
        for k=1:iq
            % Loop over vibrational states l
            for l=1:iq
                % Compute third order cascade auxillary functions
                % Sequential cascades
                if n~=k
                    % Auxillary function #4 for third order sequential
                    % cascade weg+dw-.wvib
                    f1A(:,:,m)=f1A(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,l)...
                        .*L_t(:,:,n,m)...
                        .*J(:,:,n,k)...
                        .*L_t(:,:,n,l);
                    % Auxillary function #2 for third order sequential
                    % cascade
                    f2A(:,:,m)=f2A(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,l)...
                        *L_rp_m(m,n)...
                        .*J(:,:,k,n)...
                        .*L_t(:,:,k,l);
                end
                if m~=k
                    % Auxillary function #3 for third order sequential
                    % cascade
                    f3A(:,:,m)=f3A(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,m)...
                        .*L_t(:,:,n,m)...
                        .*J(:,:,k,m)...
                        .*L_t(:,:,l,m);
                end
                if m~=k
                    % Auxillary function #4 for third order sequential
                    % cascade
                    f4A(:,:,m)=f4A(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,k)...
                        *L_rp_m(m,n)...
                        .*J(:,:,m,k)...
                        .*L_t(:,:,l,k);
                end
                
                % Sequential cascades
                if k~=m
                    % Auxillary function #1 for third order
                    % cascade
                    f1B(:,:,m)=f1B(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,l)...
                        *L_ap_p(n,m)...
                        .*L_t(:,:,n,l)...
                        .*D(:,:,n,k);
                    
                    % Auxillary function #2 for third order
                    % cascade
                    f2B(:,:,m)=f2B(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,l)...
                        *L_ap_m(m,n)...
                        .*L_t(:,:,k,l)...
                        .*D(:,:,k,n);
                end
                if k~=m
                    % Auxillary function #3 for third order
                    % cascade
                    f3B(:,:,m)=f3B(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,m)...
                        *L_ap_p(n,m)...
                        .*L_t(:,:,l,m)...
                        .*D(:,:,k,m);
                    % Auxillary function #4 for third order
                    % cascade
                    f4B(:,:,m)=f4B(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,k)...
                        *L_ap_m(m,n)...
                        .*L_t(:,:,l,k)...
                        .*D(:,:,m,k);
                end
                %
                
                % Compute fifth order auxillary functions
                % Loop over vibrational states u
                for u=1:iq
                    % Loop over vibrational states v
                    for v=1:iq
                        %
                        if m~=u
                            % Auxillary function #1 for fifth order signal
                            r1(:,:,m)=r1(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,u)*ovlp(v,m)...
                                *L_ap_p(n,m)...
                                .*D(:,:,k,m)...
                                .*L_t(:,:,l,m)...
                                .*J(:,:,u,m)...
                                .*L_t(:,:,v,m);
                        end
                        %
                        if k~=u
                            % Auxillary function #2 for fifth order signal
                            r2(:,:,m)=r2(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,k)*ovlp(v,u)...
                                *L_ap_p(n,m)...
                                .*D(:,:,k,m)...
                                *L_rp_m(k,l)...
                                .*J(:,:,k,u)...
                                .*L_t(:,:,v,u);
                        end
                        %
                        if m~=u
                            % Auxillary function #3 for fifth order signal
                            r3(:,:,m)=r3(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,m)*ovlp(v,u)...
                                *L_ap_m(m,n)...
                                .*D(:,:,m,k)...
                                *L_rp_m(m,l)...
                                .*J(:,:,m,u)...
                                .*L_t(:,:,v,u);
                        end
                        %
                        if k~=u
                            % Auxillary function #4 for fifth order signal
                            r4(:,:,m)=r4(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,u)*ovlp(v,k)...
                                *L_ap_m(m,n)...
                                .*D(:,:,m,k)...
                                .*L_t(:,:,l,k)...
                                .*J(:,:,u,k)...
                                .*L_t(:,:,v,k);
                        end
                        %
                        if k~=u
                            % Auxillary function #5 for fifth order signal
                            r5(:,:,m)=r5(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(k,v)*ovlp(u,v)...
                                *L_ap_p(n,m)...
                                .*D(:,:,n,k)...
                                *L_rp_m(l,k)...
                                .*J(:,:,u,k)...
                                .*L_t(:,:,u,v);
                        end
                        %
                        if n~=u
                            % Auxillary function #6 for fifth order signal
                            r6(:,:,m)=r6(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(u,v)*ovlp(n,v)...
                                *L_ap_p(n,m)...
                                .*D(:,:,n,k)...
                                .*L_t(:,:,n,l)...
                                .*J(:,:,n,u)...
                                .*L_t(:,:,n,v);
                        end
                        %
                        if n~=u
                            % Auxillary function #7 for fifth order signal
                            r7(:,:,m)=r7(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(n,v)*ovlp(u,v)...
                                *L_ap_m(m,n)...
                                .*D(:,:,k,n)...
                                *L_rp_m(l,n)...
                                .*J(:,:,u,n)...
                                .*L_t(:,:,u,v);
                        end
                        %
                        if k~=u
                            % Auxillary function #8 for fifth order signal
                            r8(:,:,m)=r8(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(u,v)*ovlp(k,v)...
                                *L_ap_m(m,n)...
                                .*D(:,:,k,n)...
                                .*L_t(:,:,k,l)...
                                .*J(:,:,k,u)...
                                .*L_t(:,:,k,v);
                        end
                        %
                        if l~=u
                            % Auxillary function #9 for fifth order signal
                            r9(:,:,m)=r9(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(u,v)*ovlp(l,v)...
                                *L_ap_p(n,m)...
                                .*D(:,:,k,m)...
                                .*L_t(:,:,l,m)...
                                .*J(:,:,l,u)...
                                .*L_t(:,:,l,v);
                            %
                            % Auxillary function #10 for fifth order signal
                            r10(:,:,m)=r10(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(l,v)*ovlp(u,v)...
                                *L_ap_p(n,m)...
                                .*D(:,:,k,m)...
                                *L_rp_m(k,l)...
                                .*J(:,:,u,l)...
                                .*L_t(:,:,u,v);
                            %
                            % Auxillary function #11 for fifth order signal
                            r11(:,:,m)=r11(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(u,v)*ovlp(l,v)...
                                *L_ap_m(m,n)...
                                .*D(:,:,m,k)...
                                .*L_t(:,:,l,k)...
                                .*J(:,:,l,u)...
                                .*L_t(:,:,l,v);
                            %
                            % Auxillary function #12 for fifth order signal
                            r12(:,:,m)=r12(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(l,v)*ovlp(u,v)...
                                *L_ap_m(m,n)...
                                .*D(:,:,m,k)...
                                *L_rp_m(m,l)...
                                .*J(:,:,u,l)...
                                .*L_t(:,:,u,v);
                            %
                            % Auxillary function #13 for fifth order signal
                            r13(:,:,m)=r13(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,l)*ovlp(v,u)...
                                *L_ap_p(n,m)...
                                .*D(:,:,n,k)...
                                *L_rp_m(l,k)...
                                .*J(:,:,l,u)...
                                .*L_t(:,:,v,u);
                            %
                            % Auxillary function #14 for fifth order signal
                            r14(:,:,m)=r14(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,u)*ovlp(v,l)...
                                *L_ap_p(n,m)...
                                .*D(:,:,n,k)...
                                .*L_t(:,:,n,l)...
                                .*J(:,:,u,l)...
                                .*L_t(:,:,v,l);
                            %
                            % Auxillary function #15 for fifth order signal
                            r15(:,:,m)=r15(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,l)*ovlp(v,u)...
                                *L_ap_m(m,n)...
                                .*D(:,:,k,n)...
                                *L_rp_m(l,n)...
                                .*J(:,:,l,u)...
                                .*L_t(:,:,v,u);
                            %
                            % Auxillary function #16 for fifth order signal
                            r16(:,:,m)=r16(:,:,m)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,u)*ovlp(v,l)...
                                *L_ap_m(m,n)...
                                .*D(:,:,k,n)...
                                .*L_t(:,:,k,l)...
                                .*J(:,:,u,l)...
                                .*L_t(:,:,v,l);
                        end
                        %
                    end % End loop over vibrational states v
                end % End loop over vibrational states u
            end % End loop over vibrational state l
        end % End loop over vibrational states k
    end % End loop over vibrational states n
end % End loop over initial state
r1=sum(r1,3);r2=sum(r2,3);r3=sum(r3,3);r4=sum(r4,3);
r5=sum(r5,3);r6=sum(r6,3);r7=sum(r7,3);r8=sum(r8,3);
r9=sum(r9,3);r10=sum(r10,3);r11=sum(r11,3);r12=sum(r12,3);
r13=sum(r13,3);r14=sum(r14,3);r15=sum(r15,3);r16=sum(r16,3);
f1A=sum(f1A,3);f2A=sum(f2A,3);f3A=sum(f3A,3);f4A=sum(f4A,3);
f1B=sum(f1B,3);f2B=sum(f2B,3);f3B=sum(f3B,3);f4B=sum(f4B,3);

% Compute sequential third order cascade response.
cas2=(1i)^6*(f1A+f2A+f3A+f4A)...
    .*(f1B+f2B+f3B+f4B);

% COMPUTE Direct fifth order auxillary
direct=(1i)^5*(r1+r2+r3+r4)...
    +(r5+r6+r7+r8)...
    +(r9+r10+r11+r12)...
    +(r13+r14+r15+r16);
dir2=direct;

ratio=abs(cas2)./abs(dir2);

figure;
subplot(2,2,1);contour(ww,ww,abs(cas2),50);colorbar;colormap('jet');
subplot(2,2,2);contour(ww,ww,abs(dir2),50);colorbar;colormap('jet');
subplot(2,2,3);contour(ww,ww,abs(1.7370e13/3e10*cas2+dir2),50);colorbar;colormap('jet');
subplot(2,2,4);contour(ww,ww,abs(1.7370e13/3e10*cas2)+abs(dir2),50);colorbar;colormap('jet');
end % End function response2_TC
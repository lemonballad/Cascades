function [direct,cascade_3,e3,tau,wrs] = FSRS_TC_Tuning(E_vib,ovlp,nquanta,...
    parameters_material,parameters_laser)
% Compute third order cascade response functions
%   wviball             : vibrational energies for each basis state
%   ovlp                  : overlap integrals between basis states.
%   nquanta           : number of quanta
%   parameters      : Material parameters

%% COMPUTE BOLTZMANN POPULATIONS
kT=200; % kT in cm^-1
% Compute array of 
boltz_factor=exp(-E_vib/kT);
% Compute partition function
partition_func=sum(boltz_factor);
% Compute boltzman populations
boltz_pop=boltz_factor/partition_func;

%%
iq=nquanta;
% Speed of light in cm/fs
c=2.998E-5;%
% 2pi*c
r2w=2*pi*c;%0.0001885;%
% Vibrational energy gaps
[col,row]=meshgrid(E_vib,E_vib);
w=row-col;

%% Material parameters
% Electronic dephasing rate
gamma_eg=parameters_material.gamma_eg;
% Vibrational dephasing rate
gamma_vib=parameters_material.gamma_vib;
% Electronic energy gap
weg=parameters_material.weg;

%% Laser parameters
% Frequency pulse actinic
w_ap=parameters_laser.w_ap;
% Frequency pulse raman
w_rp=parameters_laser.w_rp;

% Spectral width of actinic pulse
LAMBDA_ap=parameters_laser.LAMBDA_ap;
% Spectral width of raman pulse
LAMBDA_rp=parameters_laser.LAMBDA_rp;
%
dt=parameters_laser.dt;
%
nt=parameters_laser.nt;

%%
damp=gamma_vib*c;

kj=1:nt;
% Time delay defined from 0 to 10^4 fs (10 ps)
tau=(kj-1)*dt;
tau2=300;
% % Number of time points in time delay
% nt=length(tau);
% Frequency signal
w_t=w_rp-parameters_material.wvib;%w_rp-(kj-1)*32;
wrs=w_t;
% Number of frequency points in spectrum
nw=length(w_t);

% Initialize response functions to 0
r1=zeros(nt,nw,'double');f1A=zeros(nt,nw,'double');
r2=r1;r3=r1;r4=r1;r5=r1;r6=r1;r7=r1;r8=r1;
r9=r1;r10=r1;r11=r1;r12=r1;r13=r1;r14=r1;r15=r1;r16=r1;
f1B=f1A;f2A=f1A;f2B=f1A;f3A=f1A;f3B=f1A;f4A=f1A;f4B=f1A;

%% Loop over tau
parfor it1=1:nt
    % Loop over initial state m => assume m is in the ground state m=1, 0
    % quanta.
    for m=1:1
        % Loop over vibrational states n
        for n=1:iq
            % Loop over vibrational states k
            for k=1:iq
                % Loop over vibrational states l
                for l=1:iq
                    % Compute third order cascade auxillary functions
                    % Sequential cascades
                    if n~=k
                        % Auxillary function #4 for third order sequential
                        % cascade weg+dw-.wvib
                        f1A(it1,:)=f1A(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,l)...
                            *1./(w_t-weg-w(n,m)+1i*gamma_eg)...
                            *1./(w_t-w_rp-w(n,k)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                            *1./(w_t-weg-w(n,l)+1i*gamma_eg);
                        % Auxillary function #2 for third order sequential
                        % cascade
                        f2A(it1,:)=f2A(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,l)...
                            *1./(-w_rp+weg-w(m,n)+1i*gamma_eg)...
                            *1./(w_t-w_rp-w(k,n)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                            *1./(w_t-weg-w(k,l)+1i*gamma_eg);
                    end
                    if m~=k
                        % Auxillary function #3 for third order sequential
                        % cascade
                        f3A(it1,:)=f3A(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,m)...
                            *1./(w_t-weg-w(n,m)+1i*gamma_eg)...
                            *1./(w_t-w_rp-w(k,m)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                            *1./(w_t-weg-w(l,m)+1i*gamma_eg);
                    end
                    if m~=k
                        % Auxillary function #4 for third order sequential
                        % cascade
                        f4A(it1,:)=f4A(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,k)...
                            *1./(-w_rp+weg-w(m,n)+1i*gamma_eg)...
                            *1./(w_t-w_rp-w(m,k)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                            *1./(w_t-weg-w(l,k)+1i*gamma_eg);
                    end
                                                
                    % Sequential cascades
                    if k~=m
                        % Auxillary function #1 for third order 
                        % cascade
                        f1B(it1,:)=f1B(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,l)...
                            *1./(w_ap-weg-w(n,m)+1i*gamma_eg)...
                            *1./(w_t-weg-w(n,l)+1i*gamma_eg)...
                            .*exp(-1i*w(n,k)*r2w*tau(it1)-damp*tau(it1))*2*LAMBDA_ap/(w(n,k)^2+LAMBDA_ap^2);

                        % Auxillary function #2 for third order 
                        % cascade
                        f2B(it1,:)=f2B(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,l)...
                            *1./(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                            *1./(w_t-weg-w(k,l)+1i*gamma_eg)...
                            .*exp(-1i*w(k,n)*r2w*tau(it1)-damp*tau(it1))*2*LAMBDA_ap/(w(k,n)^2+LAMBDA_ap^2);
                        % Auxillary function #3 for third order 
                        % cascade
                        f3B(it1,:)=f3B(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,m)...
                            *1./(w_ap-weg-w(n,m)+1i*gamma_eg)...
                            *1./(w_t-weg-w(l,m)+1i*gamma_eg)...
                            .*exp(-1i*w(k,m)*r2w*tau(it1)-damp*tau(it1))*2*LAMBDA_ap/(w(k,m)^2+LAMBDA_ap^2);
                        % Auxillary function #4 for third order 
                        % cascade
                        f4B(it1,:)=f4B(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,k)...
                            *1./(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                            *1./(w_t-weg-w(l,k)+1i*gamma_eg)...
                            .*exp(-1i*w(m,k)*r2w*tau(it1)-damp*tau(it1))*2*LAMBDA_ap/(w(m,k)^2+LAMBDA_ap^2);
                    end
                    %
                    
                    % Compute fifth order auxillary functions
                    % Loop over vibrational states u
                    for u=1:iq
                        % Loop over vibrational states v
                        for v=1:iq
                            %
                            if m~=u
                                % Auxillary function #1 for fifth order signal
                               r1(it1,:)=r1(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,u)*ovlp(v,m)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,m)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,m)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(l,m)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,m)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,m)+1i*gamma_eg);
                            end
                            %
                            if k~=u
                                % Auxillary function #2 for fifth order signal
                                r2(it1,:)=r2(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,k)*ovlp(v,u)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,m)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,m)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(k,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(k,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,u)+1i*gamma_eg);
                            end
                            %                                                          
                            if m~=u
                                % Auxillary function #3 for fifth order signal
                                r3(it1,:)=r3(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(l,u)*ovlp(v,m)*ovlp(v,u)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(m,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(m,k)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(m,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(m,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,u)+1i*gamma_eg);
                            end
                            %
                            if k~=u
                                % Auxillary function #4 for fifth order signal
                                r4(it1,:)=r4(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(l,u)*ovlp(v,u)*ovlp(v,k)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(m,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(m,k)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(l,k)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,k)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,k)+1i*gamma_eg);
                            end
                            %
                            if k~=u
                                % Auxillary function #5 for fifth order signal
                                r5(it1,:)=r5(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(k,v)*ovlp(u,v)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(n,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(n,k)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(l,k)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,k)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(u,v)+1i*gamma_eg);
                            end
                            %
                            if n~=u
                                % Auxillary function #6 for fifth order signal
                                r6(it1,:)=r6(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(u,v)*ovlp(n,v)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(n,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(n,k)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(n,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(n,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(n,v)+1i*gamma_eg);
                            end
                            %
                            if n~=u
                                % Auxillary function #7 for fifth order signal
                                r7(it1,:)=r7(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(u,l)*ovlp(n,v)*ovlp(u,v)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,n)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,n)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(l,n)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,n)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(u,v)+1i*gamma_eg);
                            end
                            %
                            if k~=u
                                % Auxillary function #8 for fifth order signal
                                r8(it1,:)=r8(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(u,l)*ovlp(u,v)*ovlp(k,v)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,n)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,n)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(k,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(k,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(k,v)+1i*gamma_eg);
                            end
                            %
                            if l~=u
                                % Auxillary function #9 for fifth order signal
                                r9(it1,:)=r9(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(u,v)*ovlp(l,v)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,m)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,m)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(l,m)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(l,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(l,v)+1i*gamma_eg);
                                %
                                % Auxillary function #10 for fifth order signal
                                r10(it1,:)=r10(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(l,v)*ovlp(u,v)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,m)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,m)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(k,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,l)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(u,v)+1i*gamma_eg);
                                %
                                % Auxillary function #11 for fifth order signal
                                r11(it1,:)=r11(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,m)*ovlp(u,k)*ovlp(u,v)*ovlp(l,v)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(m,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(m,k)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(l,k)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(l,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(l,v)+1i*gamma_eg);
                                %
                                % Auxillary function #12 for fifth order signal
                                r12(it1,:)=r12(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(n,k)*ovlp(l,k)*ovlp(u,m)*ovlp(l,v)*ovlp(u,v)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(m,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(m,k)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(m,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,l)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(u,v)+1i*gamma_eg);
                                %
                                % Auxillary function #13 for fifth order signal
                                r13(it1,:)=r13(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,l)*ovlp(v,u)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(n,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(n,k)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(l,k)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(l,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,u)+1i*gamma_eg);
                                %
                                % Auxillary function #14 for fifth order signal
                                r14(it1,:)=r14(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,u)*ovlp(v,l)...
                                    *1/(w_ap-weg-w(n,m)+1i*gamma_eg)...
                                    .*exp(-1i*w(n,k)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(n,k)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(n,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,l)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,l)+1i*gamma_eg);
                                %
                                % Auxillary function #15 for fifth order signal
                                r15(it1,:)=r15(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(k,l)*ovlp(n,u)*ovlp(v,l)*ovlp(v,u)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,n)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,n)^2+LAMBDA_ap^2)...
                                    *1./(-w_rp+weg-w(l,n)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(l,u)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,u)+1i*gamma_eg);
                                %
                                % Auxillary function #16 for fifth order signal
                                r16(it1,:)=r16(it1,:)+boltz_pop(m)*ovlp(n,m)*ovlp(k,m)*ovlp(n,l)*ovlp(k,u)*ovlp(v,u)*ovlp(v,l)...
                                    *1/(-w_ap+weg-w(m,n)+1i*gamma_eg)...
                                    .*exp(-1i*w(k,n)*r2w*tau(it1)-damp*tau(it1) )*2*LAMBDA_ap/(w(k,n)^2+LAMBDA_ap^2)...
                                    *1./(w_t-weg-w(k,l)+1i*gamma_eg)...
                                    *1./(w_t-w_rp-w(u,l)+1i*(gamma_vib-LAMBDA_rp))*exp(-LAMBDA_rp*tau2*c)...
                                    *1./(w_t-weg-w(v,l)+1i*gamma_eg);
                            end
                            %
                        end % End loop over vibrational states v
                    end % End loop over vibrational states u
                    
                end % End loop over vibrational state l
            end % End loop over vibrational states k
        end % End loop over vibrational states n
    end % End loop over initial state
end % End loop over tau

% Compute sequential third order cascade response.
cascade_3=-1i^3*(f1A+f2A+f3A+f4A)...
    .*(f1B+f2B+f3B+f4B);%*exp(4i*(w_rp-w_t)*tau2*r2w);
% cascade_3=-1i^3*(f3A+f4A).*(f3B+f4B);
% Compute third order response of molecule A
e3=-1i*(f1A+f2A+f3A+f4A);%*exp(2i*(w_rp-w_t)*tau2*r2w);

% COMPUTE Direct fifth order auxillary
direct=(r1+r2+r3+r4)...
    +(r5+r6+r7+r8)...
    +(r9+r10+r11+r12)...
    +(r13+r14+r15+r16);%*exp(16i*(w_rp-w_t)*tau2*r2w);
% direct=(r1+r2+r3+r4);
direct=-direct;

end % End function response2_TC